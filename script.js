// –Ω–∏–∂–µ –æ–±—ä—è—Å–Ω—è–µ—Ç—å—Å—è –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Symbol.iterator
let range = {
    from: 1,
    to: 5,
}

range[Symbol.iterator] = function () {
    return {
        current: this.from,
        last: this.to,

        next() {
            if (this.current <= this.last) {
                return { done: false, value: this.current++ };
            } else {
                return { done: true };
            }
        }
    }
}


for (let num of range) {
    console.log(num);
}

// –Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ for..of
let str = "Hello Web";

// –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏
// for (let char of str) alert(char);

let iterator = str[Symbol.iterator]();

while (true) {
    let result = iterator.next();
    if (result.done) break;
    console.log(result.value); // –≤—ã–≤–æ–¥–∏—Ç —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º
}

let arrayLike = { // –µ—Å—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∏ —Å–≤–æ–π—Å—Ç–≤–æ length => –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤
    0: "Hello",
    1: "World",
    length: 2,
}

// –û—à–∏–±–∫–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Symbol.iterator)
//for (let item of arrayLike) { }

/**
 * Array.from –≤ —Å—Ç—Ä–æ–∫–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω
 * –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤–æ–º, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∏
 * –∫–æ–ø–∏—Ä—É–µ—Ç —Ç—É–¥–∞ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
 * */
let arr = Array.from(arrayLike);
alert(arr.pop());


/**
 * –¢–æ –∂–µ —Å–∞–º–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–æ–º:
 * */
arr = Array.from(range);
alert(arr.toString());

/* –ø–æ–ª–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Array.from(obj[, mapFn, thisArg]),
 * –±—É–¥–µ—Ç mapFn –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –º–∞—Å—Å–∏–≤,
 * thisArg –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å this –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
 * –í–æ–∑–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç
 * */
arr = Array.from(range, num => num * num);
alert(arr);

// –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
let strEmodzi = 'ùí≥üòÇ';

/** –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã
 *  –º–æ–∂–Ω–æ –±—ã–ª–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
 *
 *  let chars = []; // Array.from –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ç –∂–µ —Ü–∏–∫–ª
 *  for (let char of str) {
 *    chars.push(char);
 *  }
 *  */
let chars = Array.from(strEmodzi);

alert(chars[0]);
alert(chars[1]);
alert(chars.length);

// –°–æ–∑–¥–∞–µ–º –º–µ—Ç–æ–¥ slice, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã
function slice(str, start, end) {
    return Array.from(str).slice(start, end).join('');
}

str = 'ùí≥üòÇ©∑∂';

alert(slice(str, 1, 3));

// –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ slice –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã
alert(str.slice(1, 3)); // –≤—ã–≤–µ–¥–µ—Ç –º—É—Å–æ—Ä